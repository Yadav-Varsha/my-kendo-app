import { CommonModule } from "@angular/common";
import { Component, OnInit, ViewChild } from "@angular/core";
import { FormsModule } from "@angular/forms";
import { ReactiveFormsModule } from "@angular/forms";
import { KENDO_CHARTS } from "@progress/kendo-angular-charts";
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import {
  DataBindingDirective,
  KENDO_GRID,
  KENDO_GRID_EXCEL_EXPORT,
  KENDO_GRID_PDF_EXPORT,
  GridComponent as KendoGridComponent
} from "@progress/kendo-angular-grid";
import { IconModule } from "@progress/kendo-angular-icons";
import { KENDO_INPUTS } from "@progress/kendo-angular-inputs";
import { process } from "@progress/kendo-data-query";
import { SVGIcon, fileExcelIcon, filePdfIcon } from "@progress/kendo-svg-icons";
// import { employees } from "./employee";
// import { DataService } from '../data.service';
import { DataService } from '../service/data.service';
import { HttpClient } from '@angular/common/http';
import { DataStateChangeEvent } from "@progress/kendo-angular-grid";
import { GridModule } from '@progress/kendo-angular-grid';

import { images } from "./images";

@Component({
  selector: "app-grid",
  standalone: true,
  imports: [
    CommonModule,
    KENDO_GRID,
    KENDO_CHARTS,
    KENDO_INPUTS,
    KENDO_GRID_PDF_EXPORT,
    KENDO_GRID_EXCEL_EXPORT,
    FormsModule,DropDownsModule,IconModule,GridModule, ReactiveFormsModule, 
   
    
   
  ],
   templateUrl: './grid.component.html',
  styleUrl: './grid.component.css'
})
export class GridComponent implements OnInit {
  
 
  @ViewChild(DataBindingDirective) dataBinding!: DataBindingDirective;
  @ViewChild('myGrid') myGrid!: KendoGridComponent;

  leadsOptions = ['All Leads', 'My Leads', 'Archived'];
  selectedLead = 'All Leads';
  selectedPreference = 'Select Saved Preferences';
  searchText = '';
  activeView: string = 'non-intl';
  // public gridData: any[] = [];
  // public skip = 0;
  // public selectedRowIndex: number | null = null;
  // public editingRow: any = null;
  // public dataState: any = {
  //   skip: 0,
  //   take: 20,
  //   sort: [],
  //   filter: []
  // };

  // constructor(private dataService: DataService, private http: HttpClient) {}

  // ngOnInit(): void {
  //   this.loadGridData();
  // }
  // dataStateChange(event: DataStateChangeEvent): void {
  //   this.dataState.skip = event.skip;
  //   this.dataState.take = event.take;
  //   this.dataState.sort = event.sort;
  //   this.dataState.filter = event.filter;
    
    
  //   this.loadGridData();
  // }

  // ngAfterViewInit(): void {
   
  //   document.addEventListener('click', (event) => this.onGridClick(event));
  // }

  // loadGridData(): void {
  //   this.dataService.getUsers().subscribe((data: any[]) => {
  //     this.gridData = data;
  //   });
  // }

 
  // onCellClick(event: any): void {
  //   const field = event.column.field;
  //   const rowIndex = event.rowIndex;
  //   const fieldValue = event.dataItem[field];

    
  //   this.selectedRowIndex = rowIndex;
  //   this.editingRow = { ...event.dataItem }; 
  // }

  // onGridClick(event: MouseEvent): void {
  //   if (!this.myGrid || !this.selectedRowIndex) return;

  //   const clickedInsideGrid =this.myGrid.wrapper.nativeElement.contains(event.target);

    
  //   if (!clickedInsideGrid) {
  //     this.saveChanges(this.editingRow);
  //   }
  // }


  // saveChanges(updatedUser: any): void {
  //   if (updatedUser) {
  //     this.dataService.updateUser(updatedUser).subscribe(() => {
        
  //       this.loadGridData();
  //       this.selectedRowIndex = null; 
  //     });
  //   }
  // }

  // onRowClick(event: any): void {
  //   const rowIndex = event.rowIndex;

  //   if (this.selectedRowIndex !== rowIndex) {
  //     this.selectedRowIndex = rowIndex;
  //     this.editingRow = { ...event.dataItem };
  //   }
  // }

toggleView(view: string): void {
  this.activeView = view;
}

public selectedAction: string = 'Action';

public areaList: Array<string> = [
"Edit",
"Delete", 
"View",
];


  
  public someList: Array<string> = [
    "avg smf",
    "canada",
    "App.setter",
    "Canada Filter",
    "Interstate",
    "lostvswon",
    "Shipper Type-National Account",
  
  ];
  public editedRowIndex: number | null = null;
public editedItem: any;

  public gridData: any[] = [];
  public gridView: any[] = [];

  public mySelection: string[] = [];
  public pdfSVG: SVGIcon = filePdfIcon;
  public excelSVG: SVGIcon = fileExcelIcon;

  
  constructor(private dataService: DataService) {}

  ngOnInit(): void {
    this.dataService.getUsers().subscribe((data: any) => {
      this.gridData = data;
      this.gridView = data;
    });
  }
  
  public onFilter(value: Event): void {
    const inputValue = value;

    this.gridView = process(this.gridData, {
      filter: {
        logic: "or",
        filters: [
          {
            field: "full_name",
            operator: "contains",
            value: inputValue,
          },
          {
            field: "job_title",
            operator: "contains",
            value: inputValue,
          },
          {
            field: "budget",
            operator: "contains",
            value: inputValue,
          },
          {
            field: "phone",
            operator: "contains",
            value: inputValue,
          },
          {
            field: "address",
            operator: "contains",
            value: inputValue,
          },
        ],
      },
    }).data;

    this.dataBinding.skip = 0;
  }

 
  
  public exportExcel(): void {
    this.myGrid.saveAsExcel();

}

addUser(): void {
  const newUser = {
    id: null, 
    name: '',
    email: '',
  };

  this.gridView.unshift(newUser); 
  this.gridView = [...this.gridView]; 

  this.editedRowIndex = 0;
  this.editedItem = { ...newUser };
}

onEdit(dataItem: any, rowIndex: number): void {
  this.editedRowIndex = rowIndex;
  this.editedItem = { ...dataItem };
}

cancelEdit(): void {
  this.editedRowIndex = null;
  this.editedItem = null;
}

saveEdit(rowIndex: number): void {
  const updatedItem = { ...this.gridView[rowIndex], ...this.editedItem };

  if (updatedItem.id == null) {
    // New user 
    this.dataService.addUser(updatedItem).subscribe((res: any) => {
      this.gridView[rowIndex] = res;
      this.gridView = [...this.gridView];
      this.editedRowIndex = null;
      this.editedItem = null;
    });
  } else {
    // Existing user 
    this.dataService.updateUser(updatedItem).subscribe((res: any) => {
      this.gridView[rowIndex] = res;
      this.gridView = [...this.gridView];
      this.editedRowIndex = null;
      this.editedItem = null;
    });
  }
}

onDelete(dataItem: any): void {
  const confirmed = window.confirm('Are you sure you want to delete this item?');

  if (confirmed) {
    this.dataService.deleteUser(dataItem.id).subscribe(() => {
      this.gridView = this.gridView.filter(item => item.id !== dataItem.id);
    });
  }
}



}

